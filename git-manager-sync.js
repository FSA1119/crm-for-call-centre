// ========================================
// Y√ñNETƒ∞Cƒ∞ DOSYASI - Sƒ∞NKRONƒ∞ZASYON Sƒ∞STEMƒ∞
// ========================================

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const EMPLOYEE_FILES = {
  'LG 001': '1JdU8uIXOcmSQ1c70OOklcR97tqdmDTeCeikpa8DHltE',
  'NT 002': '1Q6IIfbIlTTM8hf1Nv67KLiHGzoAJUBWIhp7rOel9ngQ',
  'KO 003': '1uLufPJqFSfm1WxqSzcvDOKW_hAv8AMhkQwljeiD51mc',
  'SB 004': '17RWqUrQ_m9h0ktJQ_E_55dt-Ao-RA01O6pUFbZ9DxDs',
  'KM 005': '11veeCnPYRPGEWMzZzpLiwUOSNvPhp8n_qHEiDi7lXlw',
  'CA 006': '1XiIyORsVR14hMNu7xJjLs2wHxBYmDskGCzCHGb0IwN8'
};

const MANAGER_FILE_ID = '11IsZpaGgXtgpxrie9F_uVwp6uJPcueGhqB73WhZn60A';

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function collectAllData() {
  console.log('=== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ê–ß–ê–¢–ê ===');
  
  try {
    const managerFile = SpreadsheetApp.getActiveSpreadsheet();
    console.log('Y√∂netici dosyasƒ± a√ßƒ±ldƒ±:', managerFile.getName());
    
    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    let totalStats = {
      randevular: 0,
      firsatlar: 0,
      toplantilar: 0,
      errors: []
    };
    
    for (const [employeeCode, fileId] of Object.entries(EMPLOYEE_FILES)) {
      console.log(`\n--- ${employeeCode} i≈üleniyor ---`);
      
      try {
        const employeeFile = SpreadsheetApp.openById(fileId);
        if (!employeeFile) {
          throw new Error(`${employeeCode} dosyasƒ± bulunamadƒ±`);
        }
        
        const stats = collectEmployeeData(employeeFile, employeeCode, managerFile);
        
        totalStats.randevular += stats.randevular;
        totalStats.firsatlar += stats.firsatlar;
        totalStats.toplantilar += stats.toplantilar;
        
        console.log(`${employeeCode} tamamlandƒ±:`, stats);
        
      } catch (error) {
        console.error(`${employeeCode} hatasƒ±:`, error.message);
        totalStats.errors.push(`${employeeCode}: ${error.message}`);
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateManagerStatistics(managerFile, totalStats);
    
    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    showSyncResults(totalStats);
    
    console.log('=== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø TAMAMLANDI ===');
    
  } catch (error) {
    console.error('Synchronization failed:', error);
    SpreadsheetApp.getUi().alert('Synchronization Error: ' + error.message);
  }
}

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
function collectEmployeeData(employeeFile, employeeCode, managerFile) {
  console.log(`${employeeCode} verileri toplanƒ±yor...`);
  
  const stats = {
    randevular: 0,
    firsatlar: 0,
    toplantilar: 0
  };
  
  // Randevularƒ±m ‚Üí Randevular
  try {
    const randevularimSheet = employeeFile.getSheetByName('Randevularƒ±m');
    if (randevularimSheet) {
      const randevuData = collectSheetData(randevularimSheet, employeeCode);
      updateManagerSheet(managerFile, 'Randevular', randevuData, employeeCode);
      stats.randevular = randevuData.length;
      console.log(`${employeeCode} Randevularƒ±m: ${stats.randevular} kayƒ±t`);
    }
  } catch (error) {
    console.error(`${employeeCode} Randevularƒ±m hatasƒ±:`, error.message);
  }
  
  // Fƒ±rsatlarƒ±m ‚Üí Fƒ±rsatlar
  try {
    const firsatlarimSheet = employeeFile.getSheetByName('Fƒ±rsatlarƒ±m');
    if (firsatlarimSheet) {
      const firsatData = collectSheetData(firsatlarimSheet, employeeCode);
      updateManagerSheet(managerFile, 'Fƒ±rsatlar', firsatData, employeeCode);
      stats.firsatlar = firsatData.length;
      console.log(`${employeeCode} Fƒ±rsatlarƒ±m: ${stats.firsatlar} kayƒ±t`);
    }
  } catch (error) {
    console.error(`${employeeCode} Fƒ±rsatlarƒ±m hatasƒ±:`, error.message);
  }
  
  // Toplantƒ±larƒ±m ‚Üí Toplantƒ±lar
  try {
    const toplantilarimSheet = employeeFile.getSheetByName('Toplantƒ±larƒ±m');
    if (toplantilarimSheet) {
      const toplantƒ±Data = collectSheetData(toplantilarimSheet, employeeCode);
      updateManagerSheet(managerFile, 'Toplantƒ±lar', toplantƒ±Data, employeeCode);
      stats.toplantilar = toplantƒ±Data.length;
      console.log(`${employeeCode} Toplantƒ±larƒ±m: ${stats.toplantilar} kayƒ±t`);
    }
  } catch (error) {
    console.error(`${employeeCode} Toplantƒ±larƒ±m hatasƒ±:`, error.message);
  }
  
  return stats;
}

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞
function collectSheetData(sheet, employeeCode) {
  const data = [];
  const lastRow = sheet.getLastRow();
  
  if (lastRow <= 1) {
    return data; // –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  }
  
  const range = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn());
  const values = range.getValues();
  
  for (let i = 0; i < values.length; i++) {
    const row = values[i];
    if (row.some(cell => cell !== '')) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      const rowData = {
        temsilciKodu: employeeCode,
        rowIndex: i + 2,
        data: row
      };
      data.push(rowData);
    }
  }
  
  return data;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ Y√∂netici —Ñ–∞–π–ª–µ
function updateManagerSheet(managerFile, sheetName, data, employeeCode) {
  console.log(`${sheetName} g√ºncelleniyor (${employeeCode}): ${data.length} kayƒ±t`);
  
  let sheet = managerFile.getSheetByName(sheetName);
  
  // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!sheet) {
    sheet = managerFile.insertSheet(sheetName);
    console.log(`${sheetName} sayfasƒ± olu≈üturuldu`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = ['Temsilci Kodu'];
    if (sheetName === 'Randevular') {
      headers.push('Kod', '≈ûirket Adƒ±', 'Telefon', 'Mail', 'Adres', 'Randevu Tarihi', 'Aktivite', 'Kaynak', 'Y√∂netici Not');
    } else if (sheetName === 'Fƒ±rsatlar') {
      headers.push('Kod', '≈ûirket Adƒ±', 'Telefon', 'Mail', 'Adres', 'Fƒ±rsat Tarihi', 'Fƒ±rsat Durumu', 'Kaynak', 'Y√∂netici Not');
    } else if (sheetName === 'Toplantƒ±lar') {
      headers.push('Kod', '≈ûirket Adƒ±', 'Telefon', 'Mail', 'Adres', 'Toplantƒ± Tarihi', 'Toplantƒ± Saati', 'Randevu Durumu', 'Toplantƒ± Sonucu', 'Kaynak', 'Y√∂netici Not');
    }
    
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    console.log(`${sheetName} ba≈ülƒ±klarƒ± eklendi`);
  }
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  clearEmployeeData(sheet, employeeCode);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (data.length > 0) {
    const startRow = sheet.getLastRow() + 1;
    
    for (let i = 0; i < data.length; i++) {
      const rowData = data[i];
      const targetRow = startRow + i;
      
      // –î–æ–±–∞–≤–ª—è–µ–º Temsilci Kodu –≤ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É
      sheet.getRange(targetRow, 1).setValue(rowData.temsilciKodu);
      
      // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (rowData.data.length > 0) {
        sheet.getRange(targetRow, 2, 1, rowData.data.length).setValues([rowData.data]);
      }
    }
    
    console.log(`${sheetName} g√ºncellendi: ${data.length} kayƒ±t eklendi`);
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
function clearEmployeeData(sheet, employeeCode) {
  const lastRow = sheet.getLastRow();
  if (lastRow <= 1) return; // –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  
  const range = sheet.getRange(2, 1, lastRow - 1, 1); // –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
  const values = range.getValues();
  
  const rowsToDelete = [];
  for (let i = 0; i < values.length; i++) {
    if (values[i][0] === employeeCode) {
      rowsToDelete.push(i + 2); // +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
    }
  }
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
  for (let i = rowsToDelete.length - 1; i >= 0; i--) {
    sheet.deleteRow(rowsToDelete[i]);
  }
  
  if (rowsToDelete.length > 0) {
    console.log(`${employeeCode} eski verileri silindi: ${rowsToDelete.length} satƒ±r`);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Y√∂netici —Ñ–∞–π–ª–µ
function updateManagerStatistics(managerFile, totalStats) {
  console.log('ƒ∞statistikler g√ºncelleniyor...');
  
  let statsSheet = managerFile.getSheetByName('Raporlar');
  if (!statsSheet) {
    statsSheet = managerFile.insertSheet('Raporlar');
  }
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
  statsSheet.clear();
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  statsSheet.getRange(1, 1, 1, 4).setValues([['Synchronization Report', '', '', '']]);
  statsSheet.getRange(2, 1, 1, 4).setValues([['Tarih', 'Randevular', 'Fƒ±rsatlar', 'Toplantƒ±lar']]);
  
  // –î–∞–Ω–Ω—ã–µ
  const today = new Date().toLocaleDateString('tr-TR');
  statsSheet.getRange(3, 1, 1, 4).setValues([[today, totalStats.randevular, totalStats.firsatlar, totalStats.toplantilar]]);
  
  // –û—à–∏–±–∫–∏
  if (totalStats.errors.length > 0) {
    statsSheet.getRange(5, 1).setValue('Hatalar:');
    for (let i = 0; i < totalStats.errors.length; i++) {
      statsSheet.getRange(6 + i, 1).setValue(totalStats.errors[i]);
    }
  }
  
  console.log('ƒ∞statistikler g√ºncellendi');
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function showSyncResults(totalStats) {
  const message = `
Synchronization Completed!

üìä Statistics:
‚Ä¢ Randevular: ${totalStats.randevular}
‚Ä¢ Fƒ±rsatlar: ${totalStats.firsatlar}
‚Ä¢ Toplantƒ±lar: ${totalStats.toplantilar}

${totalStats.errors.length > 0 ? `\n‚ùå Errors: ${totalStats.errors.length}` : '‚úÖ No errors'}
  `.trim();
  
  SpreadsheetApp.getUi().alert('Synchronization Results', message, SpreadsheetApp.getUi().ButtonSet.OK);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤ Y√∂netici —Ñ–∞–π–ª–µ
function createManagerMenu() {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('SYNC');
  
  menu.addItem('T√ºm Verileri Topla', 'collectAllData');
  menu.addSeparator();
  menu.addItem('Toplantƒ± Ekle', 'addManagerMeeting');
  menu.addSeparator();
  menu.addItem('Synchronization Status', 'showSyncStatus');
  menu.addSeparator();
  menu.addItem('üß™ Test Sistemi', 'runAllTests');
  
  menu.addToUi();
  
  console.log('Manager menu created');
}

// –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function showSyncStatus() {
  try {
    const managerFile = SpreadsheetApp.getActiveSpreadsheet();
    const statsSheet = managerFile.getSheetByName('Raporlar');
    
    if (statsSheet) {
      const lastRow = statsSheet.getLastRow();
      if (lastRow >= 3) {
        const lastSync = statsSheet.getRange(3, 1).getValue();
        const randevular = statsSheet.getRange(3, 2).getValue();
        const firsatlar = statsSheet.getRange(3, 3).getValue();
        const toplantilar = statsSheet.getRange(3, 4).getValue();
        
        const message = `
Last Sync: ${lastSync}

Current Data:
‚Ä¢ Randevular: ${randevular}
‚Ä¢ Fƒ±rsatlar: ${firsatlar}
‚Ä¢ Toplantƒ±lar: ${toplantilar}
        `.trim();
        
        SpreadsheetApp.getUi().alert('Sync Status', message, SpreadsheetApp.getUi().ButtonSet.OK);
      } else {
        SpreadsheetApp.getUi().alert('No sync data available. Run "T√ºm Verileri Topla" first.');
      }
    } else {
      SpreadsheetApp.getUi().alert('No sync data available. Run "T√ºm Verileri Topla" first.');
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('Error checking sync status: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è onOpen –¥–ª—è Y√∂netici —Ñ–∞–π–ª–∞
function onOpen() {
  console.log('Y√∂netici dosyasƒ± a√ßƒ±ldƒ± - SYNC men√ºs√º olu≈üturuluyor');
  createManagerMenu();
}

// ========================================
// Y√ñNETƒ∞Cƒ∞ TOPLANTI EKLEME FONKSƒ∞YONLARI
// ========================================

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ Y√∂netici —Ñ–∞–π–ª–µ
function addManagerMeeting() {
  console.log('Y√∂netici toplantƒ± ekleme ba≈ülatƒ±ldƒ±');
  
  try {
    const ui = SpreadsheetApp.getUi();
    const response = ui.prompt(
      'Toplantƒ± Ekle',
      'Hangi temsilci i√ßin toplantƒ± eklemek istiyorsunuz?\n\n' + 
      Object.keys(EMPLOYEE_FILES).join('\n'),
      ui.ButtonSet.OK_CANCEL
    );
    
    if (response.getSelectedButton() === ui.Button.OK) {
      const selectedEmployee = response.getResponseText().trim();
      
      if (EMPLOYEE_FILES[selectedEmployee]) {
        showManagerMeetingDialog(selectedEmployee);
      } else {
        ui.alert('Hata', 'Ge√ßersiz temsilci kodu. L√ºtfen listeden birini se√ßin.');
      }
    }
  } catch (error) {
    console.error('Manager meeting dialog error:', error);
    SpreadsheetApp.getUi().alert('Error: ' + error.message);
  }
}

// –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
function showManagerMeetingDialog(employeeCode) {
  console.log(`Manager meeting dialog for ${employeeCode}`);
  
  const htmlTemplate = HtmlService.createTemplateFromFile('managerMeetingDialog');
  htmlTemplate.employeeCode = employeeCode;
  
  const htmlOutput = htmlTemplate.evaluate()
    .setWidth(500)
    .setHeight(600);
  
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Y√∂netici Toplantƒ± Ekle');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç Y√∂netici
function processManagerMeetingForm(formData) {
  console.log('Manager meeting form processed:', formData);
  
  try {
    const employeeCode = formData.employeeCode;
    const employeeFileId = EMPLOYEE_FILES[employeeCode];
    
    if (!employeeFileId) {
      throw new Error('Ge√ßersiz temsilci kodu');
    }
    
    const employeeFile = SpreadsheetApp.openById(employeeFileId);
    const toplantilarimSheet = employeeFile.getSheetByName('Toplantƒ±larƒ±m');
    
    if (!toplantilarimSheet) {
      throw new Error('Toplantƒ±larƒ±m sayfasƒ± bulunamadƒ±');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ Temsilci —Ñ–∞–π–ª
    const meetingData = {
      temsilciKodu: employeeCode,
      sirketAdi: formData.sirketAdi,
      telefon: formData.telefon,
      mail: formData.mail,
      adres: formData.adres,
      toplantiTarihi: formData.toplamtiTarihi,
      toplantiSaati: formData.toplamtiSaati,
      randevuDurumu: formData.randevuDurumu,
      toplantiSonucu: formData.toplamtiSonucu,
      yoneticiNot: formData.yoneticiNot
    };
    
    addMeetingToEmployeeFile(toplantilarimSheet, meetingData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º Y√∂netici —Ñ–∞–π–ª
    collectAllData();
    
    SpreadsheetApp.getUi().alert('Ba≈üarƒ±lƒ±', 'Toplantƒ± ba≈üarƒ±yla eklendi ve senkronize edildi.');
    
  } catch (error) {
    console.error('Manager meeting processing error:', error);
    SpreadsheetApp.getUi().alert('Hata: ' + error.message);
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–∞–π–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
function addMeetingToEmployeeFile(sheet, meetingData) {
  const lastRow = sheet.getLastRow() + 1;
  
  const rowData = [
    meetingData.temsilciKodu,
    meetingData.sirketAdi,
    meetingData.telefon,
    meetingData.mail,
    meetingData.adres,
    meetingData.toplamtiTarihi,
    meetingData.toplamtiSaati,
    meetingData.randevuDurumu,
    meetingData.toplamtiSonucu,
    'Y√∂netici Ekleme',
    meetingData.yoneticiNot
  ];
  
  sheet.getRange(lastRow, 1, 1, rowData.length).setValues([rowData]);
  console.log('Meeting added to employee file');
}

console.log('Y√∂netici synchronization system loaded'); 