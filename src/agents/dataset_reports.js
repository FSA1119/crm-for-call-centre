// ========================================
// GOOGLE SHEETS CRM - DATASET REPORTS
// ========================================

/**
 * ğŸ“¦ Dataset Raporu oluÅŸturur: SeÃ§ilen Format Tablo adÄ± (dataset) iÃ§in tÃ¼m sayfalarda Ã¶zet Ã§Ä±karÄ±r
 * Ã‡Ä±ktÄ±: "Data RaporlarÄ±" sayfasÄ±na yazÄ±lÄ±r
 */
function generateDatasetReport(parameters) {
  console.log('Function started:', parameters);
  
  try {
    if (!validateInput(parameters || {})) {
      throw new Error('Invalid input provided');
    }

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const ui = SpreadsheetApp.getUi();

    // Mevcut Format Tablo sayfalarÄ±nÄ± topla
    const sheets = ss.getSheets();
    const datasetNames = sheets
      .map(s => s.getName())
      .filter(name => isFormatTable(ss.getSheetByName(name)));

    if (datasetNames.length === 0) {
      ui.alert('Bilgi', 'Herhangi bir Format Tablo bulunamadÄ±.', ui.ButtonSet.OK);
      return { success: true };
    }

    // Prompt ile dataset adÄ± seÃ§
    const resp = ui.prompt('Dataset Raporu', `Dataset (Format Tablo) seÃ§in:\n${datasetNames.join(', ')}`, ui.ButtonSet.OK_CANCEL);
    if (resp.getSelectedButton() !== ui.Button.OK) {
      return { success: false, message: 'Ä°ptal edildi' };
    }
    const dataset = resp.getResponseText().trim();
    if (!dataset) throw new Error('Dataset adÄ± boÅŸ olamaz');

    // Rapor sayfasÄ±
    const reportName = 'Data RaporlarÄ±';
    let report = ss.getSheetByName(reportName) || ss.insertSheet(reportName);
    // Temizlemeden Ã¶nce satÄ±r ekle stratejisi: her dataset iÃ§in blok ekleyelim
    const startRow = report.getLastRow() + 2;

    // 1) Format Tablo sayÄ±mÄ±
    const ftSheet = ss.getSheetByName(dataset);
    if (!ftSheet) throw new Error(`Format Tablo bulunamadÄ±: ${dataset}`);
    const ftData = ftSheet.getDataRange().getValues();
    const ftHeaders = ftData[0] || [];
    const ftRows = ftData.slice(1);
    const idxAktivite = ftHeaders.indexOf('Aktivite');
    const totalContacts = ftRows.filter(r => r.some(c => c !== '')).length;
    const ftCounts = countByValues(ftRows, idxAktivite, ['Ä°lgilenmiyor','UlaÅŸÄ±lamadÄ±','Randevu AlÄ±ndÄ±','Ä°leri Tarih Randevu','Bilgi Verildi','Yeniden Aranacak','FÄ±rsat Ä°letildi']);

    // 2) RandevularÄ±m
    const rSheet = ss.getSheetByName('RandevularÄ±m');
    const rCounts = rSheet ? countBySource(rSheet, dataset, ['Randevu durumu'], ['Randevu AlÄ±ndÄ±','Randevu Teyitlendi','Randevu Ertelendi','Randevu Ä°ptal oldu','Ä°leri Tarih Randevu']) : {};

    // 3) FÄ±rsatlarÄ±m
    const fSheet = ss.getSheetByName('FÄ±rsatlarÄ±m');
    const fCounts = fSheet ? countBySource(fSheet, dataset, ['FÄ±rsat Durumu'], ['Yeniden Aranacak','Bilgi Verildi','FÄ±rsat Ä°letildi']) : {};

    // 4) ToplantÄ±larÄ±m (Kaynak artÄ±k dataset)
    const tSheet = ss.getSheetByName('ToplantÄ±larÄ±m');
    const tCounts = tSheet ? countBySource(tSheet, dataset, ['ToplantÄ± Sonucu'], ['SatÄ±ÅŸ YapÄ±ldÄ±','Teklif iletildi','Beklemede','SatÄ±ÅŸ Ä°ptal']) : {};

    // Oranlar
    const safe = (v) => Number(v || 0);
    const percent = (v, base) => base > 0 ? Math.round((safe(v)/base)*1000)/10 : 0; // 1 hane

    const rows = [];
    rows.push([`ğŸ“¦ DATASET RAPORU â€“ ${dataset}`]);
    rows.push([]);
    rows.push(['Toplam Kontak', totalContacts]);
    rows.push(['Randevu AlÄ±ndÄ±', safe(rCounts['Randevu AlÄ±ndÄ±']||0), `%${percent(rCounts['Randevu AlÄ±ndÄ±'], totalContacts)}`]);
    rows.push(['FÄ±rsat Ä°letildi', safe(fCounts['FÄ±rsat Ä°letildi']||0), `%${percent(fCounts['FÄ±rsat Ä°letildi'], totalContacts)}`]);
    rows.push(['SatÄ±ÅŸ YapÄ±ldÄ±', safe(tCounts['SatÄ±ÅŸ YapÄ±ldÄ±']||0), `%${percent(tCounts['SatÄ±ÅŸ YapÄ±ldÄ±'], totalContacts)}`]);
    rows.push([]);
    rows.push(['UlaÅŸÄ±lamadÄ±', safe(ftCounts['UlaÅŸÄ±lamadÄ±']||0), `%${percent(ftCounts['UlaÅŸÄ±lamadÄ±'], totalContacts)}`]);
    rows.push(['Ä°lgilenmiyor', safe(ftCounts['Ä°lgilenmiyor']||0), `%${percent(ftCounts['Ä°lgilenmiyor'], totalContacts)}`]);
    rows.push([]);
    rows.push(['Randevu DaÄŸÄ±lÄ±mÄ±']);
    rows.push(['Randevu AlÄ±ndÄ±', safe(rCounts['Randevu AlÄ±ndÄ±']||0)]);
    rows.push(['Randevu Teyitlendi', safe(rCounts['Randevu Teyitlendi']||0)]);
    rows.push(['Randevu Ertelendi', safe(rCounts['Randevu Ertelendi']||0)]);
    rows.push(['Randevu Ä°ptal oldu', safe(rCounts['Randevu Ä°ptal oldu']||0)]);
    rows.push(['Ä°leri Tarih Randevu', safe(rCounts['Ä°leri Tarih Randevu']||0)]);
    rows.push([]);
    rows.push(['FÄ±rsat DaÄŸÄ±lÄ±mÄ±']);
    rows.push(['Yeniden Aranacak', safe(fCounts['Yeniden Aranacak']||0)]);
    rows.push(['Bilgi Verildi', safe(fCounts['Bilgi Verildi']||0)]);
    rows.push(['FÄ±rsat Ä°letildi', safe(fCounts['FÄ±rsat Ä°letildi']||0)]);
    rows.push([]);
    rows.push(['ToplantÄ± SonuÃ§larÄ±']);
    rows.push(['SatÄ±ÅŸ YapÄ±ldÄ±', safe(tCounts['SatÄ±ÅŸ YapÄ±ldÄ±']||0)]);
    rows.push(['Teklif iletildi', safe(tCounts['Teklif iletildi']||0)]);
    rows.push(['Beklemede', safe(tCounts['Beklemede']||0)]);
    rows.push(['SatÄ±ÅŸ Ä°ptal', safe(tCounts['SatÄ±ÅŸ Ä°ptal']||0)]);

    if (rows.length > 0) {
      report.getRange(startRow, 1, rows.length, Math.max(...rows.map(r => r.length))).setValues(rows);
      // Basit biÃ§imleme
      report.getRange(startRow, 1).setFontWeight('bold').setFontSize(13).setFontColor('#1a73e8');
      report.getRange(startRow+2, 1, 1, 2).setFontWeight('bold');
      report.getRange(startRow+6, 1, 1, 2).setFontWeight('bold');
    }

    ui.alert('âœ… Dataset Raporu', `${dataset} iÃ§in rapor yazÄ±ldÄ±.`, ui.ButtonSet.OK);
    console.log('Processing complete:', { dataset });
    return { success: true };
  } catch (error) {
    console.error('Function failed:', error);
    SpreadsheetApp.getUi().alert('Hata: ' + error.message);
    throw error;
  }
}

function countByValues(rows, valueIdx, keys) {
  const counts = {};
  keys.forEach(k => counts[k] = 0);
  if (valueIdx === -1) return counts;
  rows.forEach(r => {
    const v = (r[valueIdx] || '').toString().trim();
    if (v && counts.hasOwnProperty(v)) counts[v]++;
  });
  return counts;
}

function countBySource(sheet, dataset, statusHeaderAliases, keys) {
  const data = sheet.getDataRange().getValues();
  if (data.length <= 1) return {};
  const headers = data[0];
  const rows = data.slice(1);
  const kaynakIdx = headers.indexOf('Kaynak');
  const statusIdx = findColumnIndex(headers, statusHeaderAliases);
  const counts = {};
  keys.forEach(k => counts[k] = 0);
  if (kaynakIdx === -1 || statusIdx === -1) return counts;
  rows.forEach(r => {
    const k = (r[kaynakIdx] || '').toString().trim();
    if (k !== dataset) return;
    const v = (r[statusIdx] || '').toString().trim();
    if (counts.hasOwnProperty(v)) counts[v]++;
  });
  return counts;
}

/**
 * CRM menÃ¼sÃ¼ne Dataset rapor giriÅŸini eklemek iÃ§in Ã§aÄŸrÄ±lacak sarmalayÄ±cÄ±
 */
function showDatasetReportDialog() {
  console.log('Showing dataset report flow');
  generateDatasetReport({});
}
